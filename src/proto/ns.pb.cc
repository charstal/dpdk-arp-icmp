// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns.proto

#include "ns.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ns {
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Response_ArpStatsEntry_DoNotUse::Response_ArpStatsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Response_ArpStatsEntry_DoNotUseDefaultTypeInternal {
  constexpr Response_ArpStatsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Response_ArpStatsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Response_ArpStatsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Response_ArpStatsEntry_DoNotUseDefaultTypeInternal _Response_ArpStatsEntry_DoNotUse_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arp_stats_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , pci_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_arp_(0u)
  , num_bcast_arp_(0u)
  , num_ipv4_(0u)
  , num_ipv6_(0u)
  , num_multicast_(0u){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr ARPStats::ARPStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_pkts_(0u)
  , rate_(0u){}
struct ARPStatsDefaultTypeInternal {
  constexpr ARPStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPStatsDefaultTypeInternal() {}
  union {
    ARPStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPStatsDefaultTypeInternal _ARPStats_default_instance_;
}  // namespace ns
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ns_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ns_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ns_2eproto = nullptr;

const uint32_t TableStruct_ns_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns::Response_ArpStatsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ns::Response_ArpStatsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns::Response_ArpStatsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ns::Response_ArpStatsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns::Response, pci_id_),
  PROTOBUF_FIELD_OFFSET(::ns::Response, num_arp_),
  PROTOBUF_FIELD_OFFSET(::ns::Response, num_bcast_arp_),
  PROTOBUF_FIELD_OFFSET(::ns::Response, num_ipv4_),
  PROTOBUF_FIELD_OFFSET(::ns::Response, num_ipv6_),
  PROTOBUF_FIELD_OFFSET(::ns::Response, num_multicast_),
  PROTOBUF_FIELD_OFFSET(::ns::Response, arp_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns::ARPStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns::ARPStats, num_pkts_),
  PROTOBUF_FIELD_OFFSET(::ns::ARPStats, rate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ns::Request)},
  { 6, 14, -1, sizeof(::ns::Response_ArpStatsEntry_DoNotUse)},
  { 16, -1, -1, sizeof(::ns::Response)},
  { 29, -1, -1, sizeof(::ns::ARPStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns::_Response_ArpStatsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns::_ARPStats_default_instance_),
};

const char descriptor_table_protodef_ns_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010ns.proto\022\002ns\"\t\n\007Request\"\353\001\n\010Response\022\016"
  "\n\006pci_id\030\001 \001(\t\022\017\n\007num_arp\030\002 \001(\r\022\025\n\rnum_b"
  "cast_arp\030\003 \001(\r\022\020\n\010num_ipv4\030\004 \001(\r\022\020\n\010num_"
  "ipv6\030\005 \001(\r\022\025\n\rnum_multicast\030\006 \001(\r\022-\n\tarp"
  "_stats\030\007 \003(\0132\032.ns.Response.ArpStatsEntry"
  "\032=\n\rArpStatsEntry\022\013\n\003key\030\001 \001(\t\022\033\n\005value\030"
  "\002 \001(\0132\014.ns.ARPStats:\0028\001\"*\n\010ARPStats\022\020\n\010n"
  "um_pkts\030\001 \001(\r\022\014\n\004rate\030\002 \001(\r26\n\010NetStats\022"
  "*\n\013GetNetStats\022\013.ns.Request\032\014.ns.Respons"
  "e\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ns_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ns_2eproto = {
  false, false, 371, descriptor_table_protodef_ns_2eproto, "ns.proto", 
  &descriptor_table_ns_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_ns_2eproto::offsets,
  file_level_metadata_ns_2eproto, file_level_enum_descriptors_ns_2eproto, file_level_service_descriptors_ns_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ns_2eproto_getter() {
  return &descriptor_table_ns_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ns_2eproto(&descriptor_table_ns_2eproto);
namespace ns {

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ns.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns.Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ns_2eproto_getter, &descriptor_table_ns_2eproto_once,
      file_level_metadata_ns_2eproto[0]);
}

// ===================================================================

Response_ArpStatsEntry_DoNotUse::Response_ArpStatsEntry_DoNotUse() {}
Response_ArpStatsEntry_DoNotUse::Response_ArpStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Response_ArpStatsEntry_DoNotUse::MergeFrom(const Response_ArpStatsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Response_ArpStatsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ns_2eproto_getter, &descriptor_table_ns_2eproto_once,
      file_level_metadata_ns_2eproto[1]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arp_stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  arp_stats_.MergeFrom(from.arp_stats_);
  pci_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pci_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pci_id().empty()) {
    pci_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pci_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_arp_, &from.num_arp_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_multicast_) -
    reinterpret_cast<char*>(&num_arp_)) + sizeof(num_multicast_));
  // @@protoc_insertion_point(copy_constructor:ns.Response)
}

inline void Response::SharedCtor() {
pci_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pci_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_arp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_multicast_) -
    reinterpret_cast<char*>(&num_arp_)) + sizeof(num_multicast_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:ns.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pci_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
  _this->arp_stats_. ~MapField();
}
inline void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Response::ArenaDtor);
  }
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ns.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arp_stats_.Clear();
  pci_id_.ClearToEmpty();
  ::memset(&num_arp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_multicast_) -
      reinterpret_cast<char*>(&num_arp_)) + sizeof(num_multicast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pci_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pci_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns.Response.pci_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_arp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_arp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_bcast_arp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_bcast_arp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_ipv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          num_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_ipv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          num_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_multicast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          num_multicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .ns.ARPStats> arp_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&arp_stats_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pci_id = 1;
  if (!this->_internal_pci_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pci_id().data(), static_cast<int>(this->_internal_pci_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns.Response.pci_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pci_id(), target);
  }

  // uint32 num_arp = 2;
  if (this->_internal_num_arp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_arp(), target);
  }

  // uint32 num_bcast_arp = 3;
  if (this->_internal_num_bcast_arp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_bcast_arp(), target);
  }

  // uint32 num_ipv4 = 4;
  if (this->_internal_num_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_ipv4(), target);
  }

  // uint32 num_ipv6 = 5;
  if (this->_internal_num_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_ipv6(), target);
  }

  // uint32 num_multicast = 6;
  if (this->_internal_num_multicast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_multicast(), target);
  }

  // map<string, .ns.ARPStats> arp_stats = 7;
  if (!this->_internal_arp_stats().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ns.Response.ArpStatsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_arp_stats().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_arp_stats().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >::const_iterator
          it = this->_internal_arp_stats().begin();
          it != this->_internal_arp_stats().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Response_ArpStatsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >::const_iterator
          it = this->_internal_arp_stats().begin();
          it != this->_internal_arp_stats().end(); ++it) {
        target = Response_ArpStatsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ns.ARPStats> arp_stats = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arp_stats_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >::const_iterator
      it = this->_internal_arp_stats().begin();
      it != this->_internal_arp_stats().end(); ++it) {
    total_size += Response_ArpStatsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pci_id = 1;
  if (!this->_internal_pci_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pci_id());
  }

  // uint32 num_arp = 2;
  if (this->_internal_num_arp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_arp());
  }

  // uint32 num_bcast_arp = 3;
  if (this->_internal_num_bcast_arp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_bcast_arp());
  }

  // uint32 num_ipv4 = 4;
  if (this->_internal_num_ipv4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_ipv4());
  }

  // uint32 num_ipv6 = 5;
  if (this->_internal_num_ipv6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_ipv6());
  }

  // uint32 num_multicast = 6;
  if (this->_internal_num_multicast() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_multicast());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arp_stats_.MergeFrom(from.arp_stats_);
  if (!from._internal_pci_id().empty()) {
    _internal_set_pci_id(from._internal_pci_id());
  }
  if (from._internal_num_arp() != 0) {
    _internal_set_num_arp(from._internal_num_arp());
  }
  if (from._internal_num_bcast_arp() != 0) {
    _internal_set_num_bcast_arp(from._internal_num_bcast_arp());
  }
  if (from._internal_num_ipv4() != 0) {
    _internal_set_num_ipv4(from._internal_num_ipv4());
  }
  if (from._internal_num_ipv6() != 0) {
    _internal_set_num_ipv6(from._internal_num_ipv6());
  }
  if (from._internal_num_multicast() != 0) {
    _internal_set_num_multicast(from._internal_num_multicast());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arp_stats_.InternalSwap(&other->arp_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pci_id_, lhs_arena,
      &other->pci_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, num_multicast_)
      + sizeof(Response::num_multicast_)
      - PROTOBUF_FIELD_OFFSET(Response, num_arp_)>(
          reinterpret_cast<char*>(&num_arp_),
          reinterpret_cast<char*>(&other->num_arp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ns_2eproto_getter, &descriptor_table_ns_2eproto_once,
      file_level_metadata_ns_2eproto[2]);
}

// ===================================================================

class ARPStats::_Internal {
 public:
};

ARPStats::ARPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns.ARPStats)
}
ARPStats::ARPStats(const ARPStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_pkts_, &from.num_pkts_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&num_pkts_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:ns.ARPStats)
}

inline void ARPStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_pkts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&num_pkts_)) + sizeof(rate_));
}

ARPStats::~ARPStats() {
  // @@protoc_insertion_point(destructor:ns.ARPStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ARPStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ARPStats::ArenaDtor(void* object) {
  ARPStats* _this = reinterpret_cast< ARPStats* >(object);
  (void)_this;
}
void ARPStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ns.ARPStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_pkts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&num_pkts_)) + sizeof(rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_pkts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ARPStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns.ARPStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_pkts = 1;
  if (this->_internal_num_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_pkts(), target);
  }

  // uint32 rate = 2;
  if (this->_internal_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns.ARPStats)
  return target;
}

size_t ARPStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns.ARPStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_pkts = 1;
  if (this->_internal_num_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_pkts());
  }

  // uint32 rate = 2;
  if (this->_internal_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ARPStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ARPStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ARPStats::GetClassData() const { return &_class_data_; }

void ARPStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ARPStats *>(to)->MergeFrom(
      static_cast<const ARPStats &>(from));
}


void ARPStats::MergeFrom(const ARPStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns.ARPStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_pkts() != 0) {
    _internal_set_num_pkts(from._internal_num_pkts());
  }
  if (from._internal_rate() != 0) {
    _internal_set_rate(from._internal_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ARPStats::CopyFrom(const ARPStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns.ARPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPStats::IsInitialized() const {
  return true;
}

void ARPStats::InternalSwap(ARPStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPStats, rate_)
      + sizeof(ARPStats::rate_)
      - PROTOBUF_FIELD_OFFSET(ARPStats, num_pkts_)>(
          reinterpret_cast<char*>(&num_pkts_),
          reinterpret_cast<char*>(&other->num_pkts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ns_2eproto_getter, &descriptor_table_ns_2eproto_once,
      file_level_metadata_ns_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns::Request* Arena::CreateMaybeMessage< ::ns::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ns::Response_ArpStatsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ns::Response_ArpStatsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns::Response_ArpStatsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ns::Response* Arena::CreateMaybeMessage< ::ns::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ns::ARPStats* Arena::CreateMaybeMessage< ::ns::ARPStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns::ARPStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
